{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to cakecutter Cakecutter is a powerful tool for setting up a basic app of any type/language/framework. It manages templates through cakes which are written in toml syntax. Cakes are capable of asking question and creating files and running commands based on the answers. Documentation Installating the CLI Using cakes Creating a cake Cake Metadata File Strucuture File Content Running Commands Advance Usage Asking questions Creating files based on answers Dyanmic file contents Running commands based on answers Basic Example Cake Publishing a cake for everyone's use","title":"Welcome to cakecutter"},{"location":"#welcome-to-cakecutter","text":"Cakecutter is a powerful tool for setting up a basic app of any type/language/framework. It manages templates through cakes which are written in toml syntax. Cakes are capable of asking question and creating files and running commands based on the answers.","title":"Welcome to cakecutter"},{"location":"#documentation","text":"Installating the CLI Using cakes Creating a cake Cake Metadata File Strucuture File Content Running Commands Advance Usage Asking questions Creating files based on answers Dyanmic file contents Running commands based on answers Basic Example Cake Publishing a cake for everyone's use","title":"Documentation"},{"location":"1-install/","text":"Installating the cli Using go The cli is written in go , so if you have go install run go install github.com/cake-cutter/cc@latest Using npm If you have npm you can install cakecutter by running For Windows npm install -g cakecutter For MacOS npm install -g cc-for-mac For Linux npm install -g cc-for-linux I dont have a mac , linux so I dont know if it works in those two os. Please create an issue if it does not work Using binary executables Download the binary executables from the repo - bin/<your_os> .","title":"Installating the cli"},{"location":"1-install/#installating-the-cli","text":"","title":"Installating the cli"},{"location":"1-install/#using-go","text":"The cli is written in go , so if you have go install run go install github.com/cake-cutter/cc@latest","title":"Using go"},{"location":"1-install/#using-npm","text":"If you have npm you can install cakecutter by running For Windows npm install -g cakecutter For MacOS npm install -g cc-for-mac For Linux npm install -g cc-for-linux I dont have a mac , linux so I dont know if it works in those two os. Please create an issue if it does not work","title":"Using npm"},{"location":"1-install/#using-binary-executables","text":"Download the binary executables from the repo - bin/<your_os> .","title":"Using binary executables"},{"location":"2-usage/","text":"Using Cakes Online cakes After installing cakecutter you can run cc cut <cake> <dir> cake is the cake's name and dir is the directory where the template will be created to cut an online cake Local cakes You can cut local cakes written in toml files by running cc local <cake.toml> <dir> cake.toml is the path to the local cake file and dir is the directory where the template will be created With npx If you are using cakecutter through npx then just prefix the command with npx . npx cc cut <cake> <dir>","title":"Using Cakes"},{"location":"2-usage/#using-cakes","text":"","title":"Using Cakes"},{"location":"2-usage/#online-cakes","text":"After installing cakecutter you can run cc cut <cake> <dir> cake is the cake's name and dir is the directory where the template will be created to cut an online cake","title":"Online cakes"},{"location":"2-usage/#local-cakes","text":"You can cut local cakes written in toml files by running cc local <cake.toml> <dir> cake.toml is the path to the local cake file and dir is the directory where the template will be created","title":"Local cakes"},{"location":"2-usage/#with-npx","text":"If you are using cakecutter through npx then just prefix the command with npx . npx cc cut <cake> <dir>","title":"With npx"},{"location":"3-create/","text":"Creating a cake Cakes are written in toml syntax which are easy to write. Cake Metadata Cake metadata consists of only two properties :- name :- The name of the cake description :- The description of the cake Example [metadata] name = \"cakecutter\" description = \"A cool description\" File Structure To create a file/directory put the it's name in [filestructure] table as the key with the value true [filestructure] \"main.go\" = \"true\" \"bin/\" = \"true\" # <= To create a directory put / in the end The value true tells cakecutter to create this. if the value does not contain true it won't create the file/dir. The reason its like this is because of dynamic filestructure. While creating the template, cakecutter will ask some questions configured by the cake author, based on there answers the files are created. To configure questions head to Advance Usage section. File Content To add content to a file put its name in [content] table as the key with its contents as the value [content] \"main.go\" = \"\"\" package main import \"fmt\" func main() { fmt.Println(\"Hi mom\") } \"\"\" Note: You can use multiline strings using 3 quotes \"\"\" \"\"\" Dynamic content is also possible by templating. head to Advance Usage section for more information. Running Commands You can add commands that will run after creating all the files and adding content. To add a command use [commands] table (ofc) with the command as the key and value true [commands] \"go mod init example.com/hello\" = \"true\" \"go build -o bin/cakecutter.exe\" = \"true\" The reason true is there is same as filestructure its needs to be there or else the command won't be invoked. Head to Advance Usage section for more information. Finishing off The cake is done, save the file and run cc local <path-to-the-file.toml> <directory> directory is the name of directory where the template will be created The template should be created in the that directory. Head to How to publish a cake section if you wanna publish this cake for everyone's use","title":"Creating a cake"},{"location":"3-create/#creating-a-cake","text":"Cakes are written in toml syntax which are easy to write.","title":"Creating a cake"},{"location":"3-create/#cake-metadata","text":"Cake metadata consists of only two properties :- name :- The name of the cake description :- The description of the cake","title":"Cake Metadata"},{"location":"3-create/#example","text":"[metadata] name = \"cakecutter\" description = \"A cool description\"","title":"Example"},{"location":"3-create/#file-structure","text":"To create a file/directory put the it's name in [filestructure] table as the key with the value true [filestructure] \"main.go\" = \"true\" \"bin/\" = \"true\" # <= To create a directory put / in the end The value true tells cakecutter to create this. if the value does not contain true it won't create the file/dir. The reason its like this is because of dynamic filestructure. While creating the template, cakecutter will ask some questions configured by the cake author, based on there answers the files are created. To configure questions head to Advance Usage section.","title":"File Structure"},{"location":"3-create/#file-content","text":"To add content to a file put its name in [content] table as the key with its contents as the value [content] \"main.go\" = \"\"\" package main import \"fmt\" func main() { fmt.Println(\"Hi mom\") } \"\"\" Note: You can use multiline strings using 3 quotes \"\"\" \"\"\" Dynamic content is also possible by templating. head to Advance Usage section for more information.","title":"File Content"},{"location":"3-create/#running-commands","text":"You can add commands that will run after creating all the files and adding content. To add a command use [commands] table (ofc) with the command as the key and value true [commands] \"go mod init example.com/hello\" = \"true\" \"go build -o bin/cakecutter.exe\" = \"true\" The reason true is there is same as filestructure its needs to be there or else the command won't be invoked. Head to Advance Usage section for more information.","title":"Running Commands"},{"location":"3-create/#finishing-off","text":"The cake is done, save the file and run cc local <path-to-the-file.toml> <directory> directory is the name of directory where the template will be created The template should be created in the that directory. Head to How to publish a cake section if you wanna publish this cake for everyone's use","title":"Finishing off"},{"location":"4-advance/","text":"Advance Usage You would might still prefer a custom cli because you can use some fancy terminal ui library to ask questions based on which you create files. Did you know that cakecutter can do that too? Isn't that cooooooooooooooooool? Asking questions You can ask questions by adding a attribute on the [questions] tables :- [[questions.a]] # <- The id you put here will be used to fetch the answers ques = \"Do you like Apple or Mango?\" type = \"select\" options = [\"Apple\", \"Mango\"] [[questions.name]] ques = \"What is your name?\" type = \"input\" default = \"Don't wanna share\" ques - The question that will be asked options - The options for select (will only work with select type) default - The default value (will only work with input type) type - The type of question Types of question There are two types - input - Input type is normal user input, The answer can be anything. select - In select type, the user is given a number of options from which the user has to select one. menu - An alias for select before creating the template. the user will be asked these questions, answers to these questons will be saved. Creating files based on answers Remember the true value that you have to put if you want a file to be created? Now you can use a templating language to return true or false based on the answers you get \"apple\" = \"\"\" {{if eq (index . \"id\") \"value\"}} true {{else}} false {{end}} \"\"\" The id here is the id of the question. and the value is the value that the answer of the question should be compared with This is equivalent to :- if (answers[\"id\"] == \"value\") { return true } else { return false } You can learn more about the templating language here Dynamic file contents You can use the same templating language for dynamic content [contents] \"test.json\" = \"\"\" { \"name\": \"{{index . \"name\"}}\" } \"\"\" Here name is the id of the question JS doc string equivalent :- `{ \"name\": \"${answers[\"name\"]}\" }` You can learn more about the templating language here Running commands based on answers You can also use the templating language to return true or false . If the return is true the command will be invoked. [commands] \"npm init -y\" = \"\"\" {{if eq (index . \"id\") \"value\"}} true {{else}} false {{end}} \"\"\" Here id is the question's id and value is the answer thats being compared with this is equivalent to :- if (answers[\"id\"] == \"value\") { return \"true\" } else { return \"false\" } You can learn more about the templating language here Finishing off There are more cool features to come, so stay tuned.","title":"Advance Usage"},{"location":"4-advance/#advance-usage","text":"You would might still prefer a custom cli because you can use some fancy terminal ui library to ask questions based on which you create files. Did you know that cakecutter can do that too? Isn't that cooooooooooooooooool?","title":"Advance Usage"},{"location":"4-advance/#asking-questions","text":"You can ask questions by adding a attribute on the [questions] tables :- [[questions.a]] # <- The id you put here will be used to fetch the answers ques = \"Do you like Apple or Mango?\" type = \"select\" options = [\"Apple\", \"Mango\"] [[questions.name]] ques = \"What is your name?\" type = \"input\" default = \"Don't wanna share\" ques - The question that will be asked options - The options for select (will only work with select type) default - The default value (will only work with input type) type - The type of question","title":"Asking questions"},{"location":"4-advance/#types-of-question","text":"There are two types - input - Input type is normal user input, The answer can be anything. select - In select type, the user is given a number of options from which the user has to select one. menu - An alias for select before creating the template. the user will be asked these questions, answers to these questons will be saved.","title":"Types of question"},{"location":"4-advance/#creating-files-based-on-answers","text":"Remember the true value that you have to put if you want a file to be created? Now you can use a templating language to return true or false based on the answers you get \"apple\" = \"\"\" {{if eq (index . \"id\") \"value\"}} true {{else}} false {{end}} \"\"\" The id here is the id of the question. and the value is the value that the answer of the question should be compared with This is equivalent to :- if (answers[\"id\"] == \"value\") { return true } else { return false } You can learn more about the templating language here","title":"Creating files based on answers"},{"location":"4-advance/#dynamic-file-contents","text":"You can use the same templating language for dynamic content [contents] \"test.json\" = \"\"\" { \"name\": \"{{index . \"name\"}}\" } \"\"\" Here name is the id of the question JS doc string equivalent :- `{ \"name\": \"${answers[\"name\"]}\" }` You can learn more about the templating language here","title":"Dynamic file contents"},{"location":"4-advance/#running-commands-based-on-answers","text":"You can also use the templating language to return true or false . If the return is true the command will be invoked. [commands] \"npm init -y\" = \"\"\" {{if eq (index . \"id\") \"value\"}} true {{else}} false {{end}} \"\"\" Here id is the question's id and value is the answer thats being compared with this is equivalent to :- if (answers[\"id\"] == \"value\") { return \"true\" } else { return \"false\" } You can learn more about the templating language here","title":"Running commands based on answers"},{"location":"4-advance/#finishing-off","text":"There are more cool features to come, so stay tuned.","title":"Finishing off"},{"location":"5-example/","text":"Basic Example Cake Here is a basic cake which asks for the user's name and creates a file with their name as the content [metadata] name = \"name-printer\" description = \"Prints your name on a file in seconds!\" # XD [[questions.name]] ques = \"What is your name?\" type = \"input\" [filestructure] \"name.txt\" = \"true\" [content] \"name.txt\" = \"\"\" {{index . \"name\"}} \"\"\"","title":"Basic Example Cake"},{"location":"5-example/#basic-example-cake","text":"Here is a basic cake which asks for the user's name and creates a file with their name as the content [metadata] name = \"name-printer\" description = \"Prints your name on a file in seconds!\" # XD [[questions.name]] ques = \"What is your name?\" type = \"input\" [filestructure] \"name.txt\" = \"true\" [content] \"name.txt\" = \"\"\" {{index . \"name\"}} \"\"\"","title":"Basic Example Cake"},{"location":"6-publish/","text":"Publishing a cake for everyone's use Logging in You need to login before you can publish a package. cc login After you have logged in. You can publish the cake Creating a README You need to a readme file. It contains details about the cake and it will also appear in the website so it should be nice Finding a name thats not taken If a cake with the same name exists. You won't be able to publish a cake with the same name (unless you own that cake). So please make sure that the name is not taken and then publish Publishing To publish a cake you can use the publish command cc publish <cake.toml> here cake.toml is the path of the cake you wanna publish Updating the cake You can update the cake by using the same command. The cake will be replaced with the new one","title":"Publishing a cake for everyone's use"},{"location":"6-publish/#publishing-a-cake-for-everyones-use","text":"","title":"Publishing a cake for everyone's use"},{"location":"6-publish/#logging-in","text":"You need to login before you can publish a package. cc login After you have logged in. You can publish the cake","title":"Logging in"},{"location":"6-publish/#creating-a-readme","text":"You need to a readme file. It contains details about the cake and it will also appear in the website so it should be nice","title":"Creating a README"},{"location":"6-publish/#finding-a-name-thats-not-taken","text":"If a cake with the same name exists. You won't be able to publish a cake with the same name (unless you own that cake). So please make sure that the name is not taken and then publish","title":"Finding a name thats not taken"},{"location":"6-publish/#publishing","text":"To publish a cake you can use the publish command cc publish <cake.toml> here cake.toml is the path of the cake you wanna publish","title":"Publishing"},{"location":"6-publish/#updating-the-cake","text":"You can update the cake by using the same command. The cake will be replaced with the new one","title":"Updating the cake"}]}